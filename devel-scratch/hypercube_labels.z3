;=============================================================================
; Encode lattice on 16-bit (w=16) vectors with d=4, k=4
;=============================================================================
(push)

(define-fun max4 ((x (_  BitVec 4))(y (_ BitVec 4))) (_ BitVec 4)
    (ite (bvuge x y) x y ))

(define-fun min4 ((x (_  BitVec 4))(y (_ BitVec 4))) (_ BitVec 4)
    (ite (bvule x y) x y ))

(define-fun leq44 ((x (_ BitVec 16))(y (_ BitVec 16))) Bool
    (and (bvule ((_ extract 3 0) x)((_ extract 3 0 ) y))
    (and (bvule ((_ extract 7 4) x)((_ extract 7 4) y))
    (and (bvule ((_ extract 11 8) x)((_ extract 11 8) y))
    (bvule ((_ extract 15 12) x)((_ extract 15 12) y))))))

(define-fun join44 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16)
    (concat (max4 ((_ extract 3 0) x) ((_ extract 3 0) y))
    (concat (max4 ((_ extract 7 4) x) ((_ extract 7 4) y))
    (concat (max4 ((_ extract 11 8) x) ((_ extract 11 8) y))
    (concat (max4 ((_ extract 15 12) x) ((_ extract 15 12) y)))))))

(define-fun meet44 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16)
    (concat (min4 ((_ extract 3 0) x) ((_ extract 3 0) y))
    (concat (min4 ((_ extract 7 4) x) ((_ extract 7 4) y))
    (concat (min4 ((_ extract 11 8) x) ((_ extract 11 8) y))
    (concat (min4 ((_ extract 15 12) x) ((_ extract 15 12) y)))))))

(echo "sanity")
(push)
(assert false)
(check-sat)
(pop)
(echo "")

(echo "debug 4,4")
(push)
(simplify ((_ extract 3 0) #x0000))
(simplify ((_ extract 3 0) #x1111))
(simplify (<= ((_ extract 3 0) #x1111)((_ extract 3 0 ) #x0000)))
(simplify (<= ((_ extract 3 0) #x0000)((_ extract 3 0 ) #x1111)))
(pop)
(echo "")

(push)
(echo "debug 1")
(assert (bvule ((_ extract 3 0) #x1111)((_ extract 3 0 ) #x0000)))
(check-sat)
(pop)

(push)
(echo "debug 2")
(assert (bvule ((_ extract 3 0) #x0000)((_ extract 3 0 ) #x1111)))
(check-sat)
(pop)

(echo "testing 4,4")
(push)
(echo "leq 1")
(assert (leq44 #x0000 #x1111))
(assert (not(leq44 #x1111 #x0000)))
(check-sat)
(pop)

(echo "testing 4,4")
(push)
(echo "leq 1.5")
(assert (not(leq44 #x0000 #x1111)))
(check-sat)
(pop)

(push)
(echo "leq 2")
(assert (not(leq44 #x1010 #x0101)))
(assert (not(leq44 #x0101 #x1010)))
(check-sat)
(pop)

(push)
(echo "join 1")
(declare-const x (_ BitVec 16))
(declare-const y (_ BitVec 16))
(declare-const z (_ BitVec 16))
(assert (= x #x3311))
(assert (= y #x1133))
(assert (= z (join44 x y )))
(assert (leq44 x z))
(assert (leq44 y z))
(assert (not (leq44 z x)))
(assert (not (leq44 z y)))
(check-sat)
(pop)

(push)
(echo "meet 1")
(declare-const x (_ BitVec 16))
(declare-const y (_ BitVec 16))
(declare-const z (_ BitVec 16))
(assert (= x #x3311))
(assert (= y #x1133))
(assert (= z (meet44 x y )))
(assert (not(leq44 x z)))
(assert (not(leq44 y z)))
(assert (leq44 z x))
(assert (leq44 z y))
(check-sat)
(pop)

(pop)

;=============================================================================
; W = 16, two modes d = 8, k = 2 and d = 4, k = 4
;=============================================================================
(push)

(define-fun max4 ((x (_  BitVec 4))(y (_ BitVec 4))) (_ BitVec 4)
    (ite (bvuge x y) x y ))

(define-fun min4 ((x (_  BitVec 4))(y (_ BitVec 4))) (_ BitVec 4)
    (ite (bvule x y) x y ))

(define-fun leq44 ((x (_ BitVec 16))(y (_ BitVec 16))) Bool
    (and (<= ((_ extract 3 0) x)((_ extract 3 0 ) y))
    (and (<= ((_ extract 7 4) x)((_ extract 7 4) y))
    (and (<= ((_ extract 11 8) x)((_ extract 11 8) y))
    (<= ((_ extract 15 12) x)((_ extract 15 12) y))))))

(define-fun join44 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16)
    (concat (max4 ((_ extract 3 0) x) ((_ extract 3 0) y))
    (concat (max4 ((_ extract 7 4) x) ((_ extract 7 4) y))
    (concat (max4 ((_ extract 11 8) x) ((_ extract 11 8) y))
    (concat (max4 ((_ extract 15 12) x) ((_ extract 15 12) y)))))))

(define-fun meet44 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16)
    (concat (min4 ((_ extract 3 0) x) ((_ extract 3 0) y))
    (concat (min4 ((_ extract 7 4) x) ((_ extract 7 4) y))
    (concat (min4 ((_ extract 11 8) x) ((_ extract 11 8) y))
    (concat (min4 ((_ extract 15 12) x) ((_ extract 15 12) y)))))))

(define-fun max2 ((x (_  BitVec 2))(y (_ BitVec 2))) (_ BitVec 2)
    (ite (bvuge x y) x y ))

(define-fun min2 ((x (_  BitVec 2))(y (_ BitVec 2))) (_ BitVec 2)
    (ite (bvule x y) x y ))

(define-fun leq82 ((x (_ BitVec 16))(y (_ BitVec 16))) Bool
    (and (<= ((_ extract 1 0) x)  ((_ extract 1 0 ) y))
    (and (<= ((_ extract 3 2) x)  ((_ extract 3 2 ) y))
    (and (<= ((_ extract 5 4) x)  ((_ extract 5 4 ) y))
    (and (<= ((_ extract 7 6) x)  ((_ extract 7 6 ) y))
    (and (<= ((_ extract 9 8) x)  ((_ extract 9 8 ) y))
    (and (<= ((_ extract 11 10) x)((_ extract 11 10 ) y))
    (and (<= ((_ extract 13 12) x)((_ extract 13 12 ) y))
         (<= ((_ extract 15 14) x)((_ extract 15 14 ) y))))))))))

(define-fun join82 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16)
    (concat (max2 ((_ extract 1 0) x)  ((_ extract 1 0 ) y))
    (concat (max2 ((_ extract 3 2) x)  ((_ extract 3 2 ) y))
    (concat (max2 ((_ extract 5 4) x)  ((_ extract 5 4 ) y))
    (concat (max2 ((_ extract 7 6) x)  ((_ extract 7 6 ) y))
    (concat (max2 ((_ extract 9 8) x)  ((_ extract 9 8 ) y))
    (concat (max2 ((_ extract 11 10) x)((_ extract 11 10 ) y))
    (concat (max2 ((_ extract 13 12) x)((_ extract 13 12 ) y))
    (concat (max2 ((_ extract 15 14) x)((_ extract 15 14 ) y)))))))))))

(define-fun meet82 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16)
    (concat (min2 ((_ extract 1 0) x)  ((_ extract 1 0 ) y))
    (concat (min2 ((_ extract 3 2) x)  ((_ extract 3 2 ) y))
    (concat (min2 ((_ extract 5 4) x)  ((_ extract 5 4 ) y))
    (concat (min2 ((_ extract 7 6) x)  ((_ extract 7 6 ) y))
    (concat (min2 ((_ extract 9 8) x)  ((_ extract 9 8 ) y))
    (concat (min2 ((_ extract 11 10) x)((_ extract 11 10 ) y))
    (concat (min2 ((_ extract 13 12) x)((_ extract 13 12 ) y))
    (concat (min2 ((_ extract 15 14) x)((_ extract 15 14 ) y)))))))))))

(declare-const config (_ BitVec 1))

(define-fun leq ((x (_ BitVec 16))(y (_ BitVec 16))) Bool
    (ite (= config #b0) (leq44 x y) (leq82 x y)))

(define-fun join ((x (_ BitVec 16))(y (_ BitVec 16))) (_ BitVec 16)
    (ite (= config #b0) (join44 x y) (join82 x y)))

(define-fun meet ((x (_ BitVec 16))(y (_ BitVec 16))) (_ BitVec 16)
    (ite (= config #b0) (meet44 x y) (meet82 x y)))

(echo "")
(echo "testing 8,2")
(push)
(echo "leq 1")
(declare-const x (_ BitVec 16))
(declare-const y (_ BitVec 16))
(assert (= x #xaa11))
(assert (= y #xba11))
(assert (leq82 x y))
(assert (not(leq82 y x)))
(check-sat)
(pop)

(push)
(echo "leq 2")
(declare-const x (_ BitVec 16))
(declare-const y (_ BitVec 16))
(assert (= x #xaa11))
(assert (= y #x5522))
(assert (not(leq82 x y)))
(assert (not(leq82 y x)))
(check-sat)
(pop)

(push)
(echo "join 1")
(declare-const x (_ BitVec 16))
(declare-const y (_ BitVec 16))
(declare-const z (_ BitVec 16))
(assert (= x #x3311))
(assert (= y #x1133))
(assert (= z (join82 x y )))
(assert (leq82 x z))
(assert (leq82 y z))
(assert (not (leq82 z x)))
(assert (not (leq82 z y)))
(check-sat)
(pop)

(push)
(echo "meet 2")
(declare-const x (_ BitVec 16))
(declare-const y (_ BitVec 16))
(declare-const z (_ BitVec 16))
(assert (= x #x3311))
(assert (= y #x1133))
(assert (= z (meet82 x y )))
(assert (not(leq82 x z)))
(assert (not(leq82 y z)))
(assert (leq82 z x))
(assert (leq82 z y))
(check-sat)
(pop)

(echo "")
(echo "testing reconfigurable")
(push)
(echo "leq 1")
(declare-const x (_ BitVec 16))
(declare-const y (_ BitVec 16))
(assert (= config #b0))
(assert (= x #xfff6))
(assert (= y #xfff9))
(assert (leq x y))
(assert (not(leq y x)))
(check-sat)
(pop)

(push)
(echo "leq 2")
(declare-const x (_ BitVec 16))
(declare-const y (_ BitVec 16))
(assert (= config #b1))
(assert (= x #xfff6))
(assert (= y #xfff9))
(assert (not(leq x y)))
(assert (not(leq y x)))
(check-sat)
(pop)
